# vim: syntax=python

print("\n----------------Functions----------------\n\n")

func add(a: int, b: int):
  print(a + b + "\n")

add(1, 2)
add(3, 4)
add(5, 6)

print("\n----------------Closures----------------\n\n")

# Closures are functions that refer to variables outside their scope

b = 5
b = 10

func sub_with_b(a: int):
  print(a - b + "\n")

sub_with_b(20)

b = 15
sub_with_b(30)

print("\n----------------Meta Function Def----------------\n\n")

# Function definition inside a function

func foo(a: int, b: int):
  func bar(a: int, b: int):
    print(a - b + "\n")
  
  bar(a, b)
  bar(b, a)

foo(1, 2)
foo(7, 4)

foo = 10
foo(foo, foo)

print("\n----------------Returning Values----------------\n\n")

func max(a: int, b: int) -> int:
  if a > b:
    ret a
  else:
    ret b

print(max(10, 20) + "\n")
print(max(20, 10) + "\n")

print("\n----------------Returning \"void\"----------------\n\n")

GREETING = "Hello"

func greet(name: string):
  if !name:
    print(GREETING + " Nobody!\n")
    ret
  print(GREETING + " " + name + "!\n")

greet("World")
greet("")

print("\n----------------Recursion----------------\n\n")

func factorial(n: int) -> int:
  if n == 0:
    ret 1
  ret n * factorial(n - 1)

print(factorial(5) + "\n")

print("\n----------------Overloading----------------\n\n")

func overloaded(a: int):
  print("int\n")

func overloaded(a: string):
  print("string\n")

overloaded(1)
overloaded("Hello")
